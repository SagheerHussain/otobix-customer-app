# # ios/fastlane/Fastfile
# default_platform(:ios)

# platform :ios do
#   lane :beta do
#     api_key = app_store_connect_api_key(
#       key_id: ENV["APP_STORE_KEY_ID"],
#       issuer_id: ENV["APP_STORE_ISSUER_ID"],
#       key_content: ENV["APP_STORE_P8_KEY"],
#       duration: 1200,
#       in_house: false
#     )

#     ENV.delete('SIGH_AD_HOC')
#     ENV.delete('SIGH_DEVELOPMENT')
#     ENV.delete('MATCH_TYPE')

#     app_id  = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
#     team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id) || ENV["APP_STORE_TEAM_ID"]

#     # Optional (keep if you like): set team on project/targets
#     update_project_team(path: "Runner.xcodeproj", teamid: team_id)

#     # Fetch & install App Store profile for the app target
#     profile_path = sigh(
#       api_key: api_key,
#       app_identifier: app_id,
#       skip_install: false,
#       force: true,
#       platform: "ios"
#     )
#     profile_name = Actions.lane_context[SharedValues::SIGH_NAME]
#     UI.user_error!("Missing provisioning profile name") if profile_name.to_s.empty?

#     # Archive WITHOUT signing. Export will embed the App Store profile.
#     gym(
#       workspace: "Runner.xcworkspace",
#       scheme: "Runner",
#       configuration: "Release",
#       clean: true,
#       export_method: "app-store",

#       # Sign only at export using the profile we fetched for the app bundle id
#       export_options: {
#         provisioningProfiles: { app_id => profile_name },
#         signingStyle: "manual",
#         teamID: team_id
#       },

#       # <- Important: prevent Xcode from trying to auto-provision during archive
#       xcargs: 'CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY=""'
#     )

#     upload_to_testflight(
#       api_key: api_key,
#       ipa: "Runner.ipa",                     # make the IPA explicit
#       skip_waiting_for_build_processing: true,
#       submit_beta_review: false,           
#       distribute_external: false             # internal only
   
#     )
#   end
# end


